AWSTemplateFormatVersion: "2010-09-09"
Description: "Stack for SageMaker-handwriting-recognition sagemaker deployment"

Parameters:
  SolutionPrefix:
    Type: String
  S3BucketName:
    Type: String
  SageMakerIAMRoleArn:
    Type: String
  PrelabelLambdaArn:
    Type: String
  PostlabelLambdaArn:
    Type: String
  SageMakerNotebookInstanceType:
    Type: String
  SageMakerTrainingInstanceType:
    Type: String
  SageMakerInferenceInstanceType:
    Type: String
  CognitoUserPool:
    Type: String
  CongitoClientID:
    Type: String
  CognitoUserPoolGroup:
    Type: String
  SolutionName:
    Type: String  
  SolutionsS3BucketNamePrefix:
    Type: String
  SageMakerDemoEndpointName:
    Type: String
  SageMakerEndpointName:
    Type: String
  SageMakerModelName:
    Type: String

Resources:
  NotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      DirectInternetAccess: Enabled
      InstanceType: !Ref SageMakerNotebookInstanceType
      LifecycleConfigName: !GetAtt LifeCycleConfig.NotebookInstanceLifecycleConfigName
      NotebookInstanceName:  !Sub "${SolutionPrefix}-notebook"
      RoleArn: !Sub "${SageMakerIAMRoleArn}"
      VolumeSizeInGB: 100
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W1201
            reason: Solution does not have KMS encryption enabled by default

  LifeCycleConfig:
    Type: AWS::SageMaker::NotebookInstanceLifecycleConfig
    Properties:
      OnStart:
        - Content:
            Fn::Base64: !Sub |
              cd /home/ec2-user/SageMaker
              sudo chown -R ec2-user:ec2-user *

              source /home/ec2-user/anaconda3/bin/activate pytorch_p36
              pip install --upgrade pip==20.1.1
              pip install -r requirements.txt
              
              source /home/ec2-user/anaconda3/bin/deactivate
          
      OnCreate:
        - Content:
            Fn::Base64: !Sub |
              set -e
              # Perform following actions as ec2-user.
              sudo -u ec2-user -i <<EOF
              cd /home/ec2-user/SageMaker

              # Copy source files
              aws s3 cp s3://${SolutionsS3BucketNamePrefix}-${AWS::Region}/${SolutionName}/sagemaker/ . --recursive --exclude ground_truth/*

              rm -r lost+found
                            
              # Set useful solution specific variables via config file.
              touch stack_outputs.json
              echo '{' >> stack_outputs.json
              echo '  "AwsAccountId": "${AWS::AccountId}",' >> stack_outputs.json
              echo '  "AwsRegion": "${AWS::Region}",' >> stack_outputs.json
              echo '  "SolutionPrefix": "${SolutionPrefix}",' >> stack_outputs.json
              echo '  "S3Bucket": "${S3BucketName}",' >> stack_outputs.json
              echo '  "SolutionS3BucketName": "${SolutionsS3BucketNamePrefix}-${AWS::Region}/${SolutionName}",' >> stack_outputs.json
              echo '  "SageMakerDemoEndpointName": "${SageMakerDemoEndpointName}",' >> stack_outputs.json
              echo '  "SageMakerModelName": "${SageMakerModelName}",' >> stack_outputs.json
              echo '  "SageMakerEndpointName": "${SageMakerEndpointName}",' >> stack_outputs.json
              echo '  "CognitoUserPool": "${CognitoUserPool}", ' >> stack_outputs.json
              echo '  "CognitoUserPoolGroup": "${CognitoUserPoolGroup}", ' >> stack_outputs.json            
              echo '  "CongitoClientID": "${CongitoClientID}", ' >> stack_outputs.json
              echo '  "PreLabelLambdaArn": "${PrelabelLambdaArn}",' >> stack_outputs.json
              echo '  "PostLabelLambdaArn": "${PostlabelLambdaArn}",' >> stack_outputs.json
              echo '  "SageMakerIamRole": "${SageMakerIAMRoleArn}",' >> stack_outputs.json
              echo '  "SageMakerInferenceInstanceType": "${SageMakerInferenceInstanceType}",' >> stack_outputs.json
              echo '  "SageMakerNotebookInstanceType": "${SageMakerNotebookInstanceType}",' >> stack_outputs.json
              echo '  "SageMakerTrainingInstanceType": "${SageMakerTrainingInstanceType}"' >> stack_outputs.json
              echo '}' >> stack_outputs.json

              python source/set_kernelspec.py --notebook 0_demo_notebook.ipynb --display-name conda_mxnet_p36 --kernel conda_mxnet_p36
              python source/set_kernelspec.py --notebook 1_Introduction.ipynb --display-name conda_mxnet_p36 --kernel conda_mxnet_p36
              python source/set_kernelspec.py --notebook 2_label_own_data.ipynb --display-name conda_mxnet_p36 --kernel conda_mxnet_p36
              python source/set_kernelspec.py --notebook 3_data_visualisation.ipynb --display-name conda_mxnet_p36 --kernel conda_mxnet_p36
              python source/set_kernelspec.py --notebook 4_model_training.ipynb --display-name conda_mxnet_p36 --kernel conda_mxnet_p36
              python source/set_kernelspec.py --notebook 5_endpoint_updates.ipynb --display-name conda_mxnet_p36 --kernel conda_mxnet_p36

              EOF
  
Outputs:
  NotebookInstanceId:
    Description: "SageMaker Notebook instance id"
    Value: !Ref NotebookInstance

  SageMakerNotebookInstanceSignOn:
    Description: "Link to the SageMaker notebook instance"
    Value: !Sub "https://console.aws.amazon.com/sagemaker/home?region=${AWS::Region}#/notebook-instances/openNotebook/${NotebookInstance.NotebookInstanceName}?view=classic"
